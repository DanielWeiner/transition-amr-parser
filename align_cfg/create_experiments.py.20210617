import json
import itertools
import numpy as np


def product_dict(o):
    keys = o.keys()
    vals = o.values()
    for instance in itertools.product(*vals):
        yield dict(zip(keys, instance))


seeds = 3

settings = {}
settings['model-config.text_emb'] = ["char"]
settings['model-config.text_enc'] = ["bilstm"]
settings['model-config.amr_emb'] = ["word", "char"]
settings['model-config.amr_enc'] = ["word_lstm", "word_bilstm", "tree_rnn", "etree_rnn"]
settings['model-config.hidden_size'] = [100, 200]
settings['batch-size'] = [4, 8]
settings['lr'] = [2e-3, 1e-3]
settings['max-epoch'] = [20]


def nested_set(o, k, v):
    parts = k.split('.', 1)

    if len(parts) == 1:
        o[k] = v
        return

    k, rest = parts
    if k not in o:
        o[k] = {}
    return nested_set(o[k], rest, v)


for i_seed in range(seeds):
    for i_exp, d in enumerate(product_dict(settings)):
        o = {}
        for k, v in d.items():
            nested_set(o, k, v)
        o['seed'] = np.random.randint(0, 100000000)
        o['name'] = 'exp_{}_seed_{}'.format(i_exp, i_seed)
        print(json.dumps(o))
